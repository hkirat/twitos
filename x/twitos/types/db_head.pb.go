// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: twitos/db_head.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DbHead struct {
	UserIndex    uint64 `protobuf:"varint,1,opt,name=userIndex,proto3" json:"userIndex,omitempty"`
	TweetIndex   uint64 `protobuf:"varint,2,opt,name=tweetIndex,proto3" json:"tweetIndex,omitempty"`
	CommentIndex uint64 `protobuf:"varint,3,opt,name=commentIndex,proto3" json:"commentIndex,omitempty"`
}

func (m *DbHead) Reset()         { *m = DbHead{} }
func (m *DbHead) String() string { return proto.CompactTextString(m) }
func (*DbHead) ProtoMessage()    {}
func (*DbHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f3e4d7e9fe84523, []int{0}
}
func (m *DbHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DbHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DbHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DbHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbHead.Merge(m, src)
}
func (m *DbHead) XXX_Size() int {
	return m.Size()
}
func (m *DbHead) XXX_DiscardUnknown() {
	xxx_messageInfo_DbHead.DiscardUnknown(m)
}

var xxx_messageInfo_DbHead proto.InternalMessageInfo

func (m *DbHead) GetUserIndex() uint64 {
	if m != nil {
		return m.UserIndex
	}
	return 0
}

func (m *DbHead) GetTweetIndex() uint64 {
	if m != nil {
		return m.TweetIndex
	}
	return 0
}

func (m *DbHead) GetCommentIndex() uint64 {
	if m != nil {
		return m.CommentIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*DbHead)(nil), "hkirat.twitos.twitos.DbHead")
}

func init() { proto.RegisterFile("twitos/db_head.proto", fileDescriptor_5f3e4d7e9fe84523) }

var fileDescriptor_5f3e4d7e9fe84523 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x29, 0xcf, 0x2c,
	0xc9, 0x2f, 0xd6, 0x4f, 0x49, 0x8a, 0xcf, 0x48, 0x4d, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0xc9, 0xc8, 0xce, 0x2c, 0x4a, 0x2c, 0xd1, 0x83, 0x48, 0x42, 0x29, 0xa5, 0x2c, 0x2e,
	0x36, 0x97, 0x24, 0x8f, 0xd4, 0xc4, 0x14, 0x21, 0x19, 0x2e, 0xce, 0xd2, 0xe2, 0xd4, 0x22, 0xcf,
	0xbc, 0x94, 0xd4, 0x0a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x84, 0x80, 0x90, 0x1c, 0x17,
	0x57, 0x49, 0x79, 0x6a, 0x6a, 0x09, 0x44, 0x9a, 0x09, 0x2c, 0x8d, 0x24, 0x22, 0xa4, 0xc4, 0xc5,
	0x93, 0x9c, 0x9f, 0x9b, 0x9b, 0x9a, 0x07, 0x55, 0xc1, 0x0c, 0x56, 0x81, 0x22, 0xe6, 0xe4, 0x78,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7,
	0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xea, 0xe9, 0x99, 0x25, 0x19, 0xa5,
	0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x10, 0x67, 0xea, 0x43, 0xfd, 0x50, 0x01, 0x63, 0x94, 0x54,
	0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0xfd, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xb5,
	0x6e, 0x94, 0xe3, 0x00, 0x00, 0x00,
}

func (m *DbHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DbHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DbHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommentIndex != 0 {
		i = encodeVarintDbHead(dAtA, i, uint64(m.CommentIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.TweetIndex != 0 {
		i = encodeVarintDbHead(dAtA, i, uint64(m.TweetIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.UserIndex != 0 {
		i = encodeVarintDbHead(dAtA, i, uint64(m.UserIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDbHead(dAtA []byte, offset int, v uint64) int {
	offset -= sovDbHead(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DbHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIndex != 0 {
		n += 1 + sovDbHead(uint64(m.UserIndex))
	}
	if m.TweetIndex != 0 {
		n += 1 + sovDbHead(uint64(m.TweetIndex))
	}
	if m.CommentIndex != 0 {
		n += 1 + sovDbHead(uint64(m.CommentIndex))
	}
	return n
}

func sovDbHead(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDbHead(x uint64) (n int) {
	return sovDbHead(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DbHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbHead
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DbHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DbHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIndex", wireType)
			}
			m.UserIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetIndex", wireType)
			}
			m.TweetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TweetIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentIndex", wireType)
			}
			m.CommentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbHead
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbHead(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbHead
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDbHead(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDbHead
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbHead
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbHead
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDbHead
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDbHead
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDbHead
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDbHead        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDbHead          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDbHead = fmt.Errorf("proto: unexpected end of group")
)
